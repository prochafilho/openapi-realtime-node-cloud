AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy a Node.js WebSocket server with AWS Secrets Manager on EC2 and integrate Twilio"

Parameters:
  AWSAccountId:
    Type: String
    Description: "Your AWS Account ID"

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "EC2 Key Pair for SSH access"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC where the instance should be launched"

  SecretId:
    Type: String
    Default: "GitHubDeployKey"
    Description: "Secrets Manager Secret ID storing the GitHub Deploy Key"

  GitHubRepoURL:
    Type: String
    Description: "GitHub repository URL of the Node.js WebSocket app"

  AppDirectory:
    Type: String
    Default: "."
    Description: "The directory inside the GitHub repository where the app is located"

  TwilioAccountSid:
    Type: String
    Description: "Twilio Account SID"

  TwilioAuthToken:
    Type: String
    Description: "Twilio Auth Token"

  TwilioPhoneNumber:
    Type: String
    Description: "Twilio Phone Number"

Resources:
  ## ✅ IAM Role for Lambda (to Fetch Latest AMI)
  AmiLookupLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "AmiLookupLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "EC2DescribeImagesPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "ec2:DescribeImages"
                Resource: "*"

  ## ✅ Lambda Function to Fetch Latest Amazon Linux 2 AMI
  LatestAmiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetLatestAmazonLinuxAmi
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AmiLookupLambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              ec2_client = boto3.client("ec2", region_name="us-east-1")
              response = ec2_client.describe_images(
                  Filters=[
                      {"Name": "name", "Values": ["amzn2-ami-hvm-*-x86_64-gp2"]},
                      {"Name": "state", "Values": ["available"]}
                  ],
                  Owners=["amazon"]
              )
              latest_image = sorted(response["Images"], key=lambda x: x["CreationDate"], reverse=True)[0]
              response_data = {"ImageId": latest_image["ImageId"]}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

  ## ✅ Custom Resource to Retrieve AMI ID
  AmiLookup:
    Type: Custom::AMI
    Properties:
      ServiceToken: !GetAtt LatestAmiLambdaFunction.Arn

  ## ✅ IAM Role for EC2 with Secrets Manager Access
  WebServerIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "WebSocketServerRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SecretsManagerAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource: !Sub "arn:aws:secretsmanager:us-east-1:${AWSAccountId}:secret:${SecretId}*"

  ## ✅ Instance Profile (Attach IAM Role to EC2)
  WebServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref WebServerIAMRole

  ## ✅ Security Group for WebSocket & HTTP Traffic
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow WebSocket and HTTP(S) traffic"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8080  # WebSocket Port
          ToPort: 8080
          CidrIp: "0.0.0.0/0"

  ## ✅ EC2 Instance (Runs WebSocket Server)
  WebServerInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t3.micro"
      ImageId: !GetAtt AmiLookup.ImageId  # ✅ Fetch latest Amazon Linux 2 AMI
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref WebServerInstanceProfile
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup

  TwilioWebhookWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

    ## ✅ Lambda Function to Register Twilio Webhook
  TwilioWebhookLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "RegisterTwilioWebhook"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt TwilioLambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          TWILIO_ACCOUNT_SID: !Ref TwilioAccountSid
          TWILIO_AUTH_TOKEN: !Ref TwilioAuthToken
          TWILIO_PHONE_NUMBER: !Ref TwilioPhoneNumber
          WAIT_CONDITION_HANDLE: !Ref TwilioWebhookWaitHandle
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          import os
          import urllib.request

          def send_signal_to_cfn(status, reason=""):
              wait_handle_url = os.environ["WAIT_CONDITION_HANDLE"]
              data = json.dumps({"Status": status, "Reason": reason, "UniqueId": "TwilioWebhookSetup", "Data": "Twilio webhook setup complete"}).encode("utf-8")
              req = urllib.request.Request(wait_handle_url, data=data, method="PUT")
              urllib.request.urlopen(req)

          def lambda_handler(event, context):
              ec2 = boto3.client("ec2")
              response = ec2.describe_addresses(Filters=[{"Name": "instance-id", "Values": [event["ResourceProperties"]["InstanceId"]]}])

              if not response["Addresses"]:
                  send_signal_to_cfn("FAILED", "No Elastic IP found")
                  return

              public_ip = response["Addresses"][0]["PublicIp"]
              webhook_url = f"http://{public_ip}/incoming-call"

              twilio_account_sid = os.environ["TWILIO_ACCOUNT_SID"]
              twilio_auth_token = os.environ["TWILIO_AUTH_TOKEN"]
              twilio_phone_number = os.environ["TWILIO_PHONE_NUMBER"]

              url = f"https://api.twilio.com/2010-04-01/Accounts/{twilio_account_sid}/IncomingPhoneNumbers.json"

              payload = {
                  "PhoneNumber": twilio_phone_number,
                  "VoiceUrl": webhook_url,
                  "VoiceMethod": "POST"
              }

              try:
                  response = requests.post(url, data=payload, auth=(twilio_account_sid, twilio_auth_token))
                  response.raise_for_status()
                  send_signal_to_cfn("SUCCESS")
              except requests.exceptions.RequestException as e:
                  send_signal_to_cfn("FAILED", str(e))
  TwilioWebhookWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref TwilioWebhookWaitHandle
      Timeout: "300"
    DependsOn: TwilioWebhookLambda

  ## ✅ Custom Resource to Trigger Webhook Registration
  TwilioWebhookRegistration:
    Type: Custom::TwilioWebhook
    Properties:
      ServiceToken: !GetAtt TwilioWebhookLambda.Arn
      InstanceId: !Ref WebServerInstance

  ## ✅ IAM Role for Twilio Lambda Function
  TwilioLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "TwilioWebhookLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "DescribeElasticIP"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeAddresses"
                Resource: "*"

Outputs:
  WebServerPublicIP:
    Description: "Public IP of the WebSocket server"
    Value: !Ref WebServerInstance
